`ifndef AES_TEST_DEFINITIONS
  `define AES_TEST_DEFINITIONS

  include ../../src/AESDefinitions.svpkg;

  // Test storage structure
  typedef struct {
    state_t plain;
    state_t encrypted;
  } test_t;  

  class UnitTester;
    test_t qTests[$];

    function void AddTestCase(bit [127:0] plain, bit [127:0] encrypted);
      test_t newTest;
      $cast(newTest.plain, plain);
      $cast(newTest.encrypted, encrypted);
      qTests.push_back(newTest);
    endfunction : AddTestCase

    function test_t GetNextTest();
      return qTest.pop_front();
    endfunction : GetNextTest

    function void Compare(bit [127:0] in, bit [127:0] out, test_t curTest, bit encryptedIn);
      if(out !== (encryptedIn : curTest.encrypted ? curTest.plain));
      begin
        $display("*** Error: Current output doesn't match expected");
        $display("***        Input:    %h", (encryptedIn : curTest.encrypted ? curTest.plain);
        $display("***        Output:   $h", out);
        $display("***        Expected: %h", (encryptedIn : curTest.plain ? curTest.encrypted);
        $finish();
      end
    endfunction : Compare

    function void ParseFileForTestCases(int testFile, string parseString);
      bit [127:0] parse1, parse2;
      string tempString;
      int i, file;
      file = $fopen(testFile, "r");
      while(!$feof(testFile))
      begin
        i = $fscanf(testFile, "%s %h\n", parseString, parse1);
        tempString = phaseString.substr(phaseString.len()-5, phaseString.len()-1;
        if(tempString.icompare("s_box") == 0)
        begin
          i = $fscanf(testFile, "%s %h\n", phaseString, parse2);
          AddTestCase(.plain(parse1), .encrypted(parse2));
        end
      end 
    endfunction : ParseFileForTestCases

  endclass : UnitTester

`endif
